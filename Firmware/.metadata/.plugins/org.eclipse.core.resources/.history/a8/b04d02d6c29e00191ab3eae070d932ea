#include "main.h"
#include "commandParser.h"
#include "usbd_cdc_if.h"
#include "dwt_stm32_delay.h"
#include "debug.h"
#include "errorHandling.h"
#include "max2871.h"
#include "txChain.h"
#include <stdio.h>
#include <string.h>

uint8_t txStr[128] = "";

void commandParser(struct MAX2871Struct *max2871Status, struct txStruct *txStatus)
{
	#define BUF_SIZE 128
	#define CMD_SIZE 32
	#define NUM_ARGS 6

	char usrMsg[BUF_SIZE];
	char command[CMD_SIZE] = "";
	char args[NUM_ARGS][16];
	uint8_t argNum = 0;
	// Get whatever the user has sent
	scanUSB((uint8_t *) usrMsg, BUF_SIZE);

	// Split on delim
	for (uint8_t i = 0; i < FIFO_SIZE; i++)
	{
		if ((usrMsg[i] == '(') || (usrMsg[i] == ')') || (usrMsg[i] == ','))
			usrMsg[i] = '\0';
	}

	// Determine the command word
	uint8_t i = 0;
	while (usrMsg[i] != '\0')
	{
		command[i] = usrMsg[i];
		i++;
	}

	// Find arguments
	while (i < FIFO_SIZE)
	{
		// If null term, (was delim) skip
		if (usrMsg[i] == '\0')
			i++;
		else
		{
			// Otherwise, copy arguments into their own strings
			uint8_t j = 0;
			while (usrMsg[i] != '\0')
			{
				args[argNum][j++] = usrMsg[i];
				i++;
			}
			args[argNum][j] = '\0';
			argNum++;
		}

	}

	// Find command based on command word, and call function
	if (strncmp("sigGen", command, 6) == 0)
	{
		sigGen(atof(args[0]), atof(args[1]), max2871Status, txStatus);

		sprintf((char *)txStr, "\r\nSignal Generator Done %0.2f MHz, \t %0.2f dBm\n", max2871Status->frequency, txStatus->measOutputPower);
		printUSB(txStr);
	}
	else if (strncmp("sweep", command, 5) == 0)
	{
		sprintf((char *)txStr, "\r\nSweep fStart = %0.2f MHz, \t fFinish = %0.2f dBm \t Power = %0.2f dBm\n", atof(args[0]), atof(args[1]), atof(args[2]));
		printUSB(txStr);

		sweep(atof(args[0]), atof(args[1]), atof(args[2]), atof(args[3]), atof(args[4]), max2871Status, txStatus);

	}
	else if (strncmp("status", command, 6) == 0)
	{
		if (strncmp("VERBOSE", args[0], 7) == 0)
			max2871PrintStatus(VERBOSE,max2871Status);
		else
			max2871PrintStatus(nVERBOSE,max2871Status);

		txChainPrintStatus(txStatus);
	}

}
